---
import type { ScriptCharacter } from "../../generated/script-schema";
import CharacterIcon from "./CharacterIcon.astro";
import FormattedDescription from "./FormattedDescription.astro";

export interface Props {
  character: ScriptCharacter | null;
  character2?: ScriptCharacter;
  title?: string;
  description?: string;
  character1Link?: string;
  character2Link?: string;
  titleLink?: string;
}

const {
  character,
  character2,
  title,
  description,
  character1Link,
  character2Link,
  titleLink,
} = Astro.props;
---

<div class="character">
  {
    character ? (
      character1Link ? (
        <a class="character-icon-link" href={character1Link}>
          <CharacterIcon
            character={character}
            size={48}
            class="character-icon-offset"
          />
        </a>
      ) : (
        <CharacterIcon
          character={character}
          size={48}
          class="character-icon-offset"
        />
      )
    ) : (
      <div class="character-icon-placeholder" />
    )
  }
  {
    character2 &&
      (character2Link ? (
        <a class="character-icon-link" href={character2Link}>
          <CharacterIcon
            character={character2}
            size={48}
            class="character-icon-offset"
          />
        </a>
      ) : (
        <CharacterIcon
          character={character2}
          size={48}
          class="character-icon-offset"
        />
      ))
  }
  <div class="character-info">
    {
      title && (
        <h4 class="character-title">
          {titleLink ? (
            <a class="character-title-link" href={titleLink}>
              {title}
            </a>
          ) : (
            title
          )}
        </h4>
      )
    }
    {
      description && (
        <p class="character-description">
          <FormattedDescription
            content={description}
            character={character ?? undefined}
          />
        </p>
      )
    }
  </div>
</div>

<style>
  .character {
    display: flex;
    align-items: flex-start;
  }

  :global(.character-icon-offset) {
    translate: -4px -4px;
  }

  .character-icon-placeholder {
    width: 48px;
  }

  .character-icon-link {
    display: contents;
  }

  .character-title {
    font-family: var(--font-title);
  }

  .character-title-link:not(:is(:hover, :focus-within)) {
    text-decoration: none;
  }

  .character-description {
    line-height: 1.3rem;
  }
</style>
