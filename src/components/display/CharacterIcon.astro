---
import type { ImageMetadata } from "astro";
import * as CHARACTER_ICONS from "../../generated/character-icons";
import type { ScriptCharacter } from "../../generated/script-schema";
import { CHARACTERS_BY_ID } from "../../lib/characters";
import { ALLOWED_EXTERNAL_HOSTNAMES } from "../../lib/images";
import { Image } from "astro:assets";

export interface Props {
  character: ScriptCharacter;
  size: number;
  class?: string;
}

const { character, size, class: className } = Astro.props;

function getFallbackIcon(team: ScriptCharacter["team"]): ImageMetadata {
  switch (team) {
    case "townsfolk":
      return CHARACTER_ICONS.townsfolk;
    case "outsider":
      return CHARACTER_ICONS.outsider;
    case "minion":
      return CHARACTER_ICONS.minion;
    case "demon":
      return CHARACTER_ICONS.demon;
    case "traveller":
      return CHARACTER_ICONS.traveller;
    case "fabled":
      return CHARACTER_ICONS.fabled;
  }
}

function ensureImageHostname(
  character: ScriptCharacter,
  imageUrl: string,
): string | ImageMetadata {
  try {
    const url = new URL(imageUrl);
    if (ALLOWED_EXTERNAL_HOSTNAMES.includes(url.hostname)) {
      return imageUrl;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
  } catch (err) {
    // Do nothing
  }
  return getFallbackIcon(character.team);
}

function getCharacterIcon(character: ScriptCharacter): string | ImageMetadata {
  // Check for images defined in script
  if (typeof character.image === "string") {
    return ensureImageHostname(character, character.image);
  }
  if (Array.isArray(character.image)) {
    switch (character.team) {
      case "townsfolk":
      case "outsider":
        return ensureImageHostname(character, character.image[0]);
      case "minion":
      case "demon":
        return ensureImageHostname(character, character.image[0]);
      case "traveller":
        return ensureImageHostname(character, character.image[0]);
      case "fabled":
        return ensureImageHostname(character, character.image[0]);
    }
  }

  // Role has no image defined, use local image if official character.
  if (CHARACTERS_BY_ID.get(character.id) !== undefined) {
    if (character.team === "traveller") {
      return (
        (CHARACTER_ICONS as Partial<Record<string, ImageMetadata>>)[
          character.id
        ] ?? getFallbackIcon(character.team)
      );
    }
    if (character.team === "fabled") {
      return (
        (CHARACTER_ICONS as Partial<Record<string, ImageMetadata>>)[
          character.id
        ] ?? getFallbackIcon(character.team)
      );
    }
    return (
      (CHARACTER_ICONS as Partial<Record<string, ImageMetadata>>)[
        character.id
      ] ?? getFallbackIcon(character.team)
    );
  }

  // Otherwise return default icon for type
  return getFallbackIcon(character.team);
}

const icon = getCharacterIcon(character);
---

{
  // Make Typescript happy by having both branches explicitly.
  typeof icon === "string" ? (
    <Image
      src={icon}
      alt={character.name}
      class={className}
      width={size}
      height={size}
      densities={[1, 2, 3]}
    />
  ) : (
    <Image
      src={icon}
      alt={character.name}
      class={className}
      width={size}
      height={size}
      densities={[1, 2, 3]}
    />
  )
}
