---
import PageView from "../../../components/misc/PageView.astro";
import ByteList from "../../../components/number-store/ByteList.astro";
import ExplainNode from "../../../components/number-store/ExplainNode.astro";
import MinimalLayout from "../../../layouts/MinimalLayout.astro";
import {
  compressToBase64,
  decodeUrlSafeBase64,
  decompressFromBase64,
  stringToBytes,
} from "../../../lib/compression";
import { MAX_AGE_SECONDS } from "../../../lib/constants";
import { decodeScript } from "../../../lib/number-store";
import { explainDecodeScript } from "../../../lib/number-store/explain";

export const prerender = false;

const { b64 } = Astro.params;

if (!b64) {
  return Astro.rewrite("/404");
}

function formatPercent2DP(n: number) {
  return `${(n * 100).toFixed(2)}%`;
}

const binaryString = decodeUrlSafeBase64(b64);
const compressedBytes = new Uint8Array(binaryString.length);
for (let i = 0; i < binaryString.length; i++) {
  compressedBytes[i] = binaryString.charCodeAt(i);
}

const bytes = await decompressFromBase64(b64, "deflate-raw");

const nodes = explainDecodeScript(bytes);
const script = decodeScript(bytes);
const scriptString = JSON.stringify(script);

const compressedJsonB64 = await compressToBase64(
  stringToBytes(scriptString),
  "deflate-raw",
);
const binaryCompressedJsonString = decodeUrlSafeBase64(compressedJsonB64);
const jsonCompressedBytes = new Uint8Array(binaryCompressedJsonString.length);
for (let i = 0; i < binaryCompressedJsonString.length; i++) {
  jsonCompressedBytes[i] = binaryCompressedJsonString.charCodeAt(i);
}

Astro.response.headers.set(
  "Cache-Control",
  `public, max-age=${MAX_AGE_SECONDS}`,
);
---

<MinimalLayout meta={{ title: "Inspect - BotC Script Viewer" }}>
  <Fragment slot="head">
    <meta name="robots" content="noindex" />
    <PageView path="/ns/REDACTED/inspect" />
  </Fragment>

  <div class="inspect-page">
    <h1>Inspect URL</h1>

    <p><a href={`/ns/${b64}`}>View script</a></p>

    <h2>NS breakdown</h2>
    <code class="node-container"
      >{nodes.map((node) => <ExplainNode node={node} />)}</code
    >

    <h2>URL data</h2>
    <table>
      <thead>
        <tr>
          <th></th>
          <th>Length</th>
          <th>Data</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>Base64</td>
          <td>{b64.length}</td>
          <td><code class="allow-word-break">{b64}</code></td>
        </tr>
        <tr>
          <td>Compressed bytes</td>
          <td>{compressedBytes.length}</td>
          <td
            ><details>
              <summary>Expand</summary>

              <code><ByteList bytes={compressedBytes} /></code>
            </details></td
          >
        </tr>
        <tr>
          <td>Decompressed bytes</td>
          <td>{bytes.length}</td>
          <td
            ><details>
              <summary>Expand</summary>

              <code><ByteList bytes={bytes} /></code>
            </details></td
          >
        </tr>
        <tr>
          <td>Decoded Script JSON</td>
          <td>{scriptString.length}</td>
          <td
            ><details>
              <summary>Expand</summary>
              <p>This may not be a byte-byte match for the input script.</p>
              <code class="allow-word-break">{scriptString}</code>
            </details></td
          >
        </tr>
        <tr>
          <td>Script JSON Compressed Bytes</td>
          <td>{jsonCompressedBytes.length}</td>
          <td
            ><details>
              <summary>Expand</summary>
              <code><ByteList bytes={jsonCompressedBytes} /></code>
            </details></td
          >
        </tr>
      </tbody>
    </table>

    <h2>Compression stats</h2>
    <table>
      <tbody>
        <tr>
          <td>DEFLATE</td>
          <td
            >Saving: {
              formatPercent2DP(1 - compressedBytes.length / bytes.length)
            } ({bytes.length - compressedBytes.length} bytes)</td
          >
        </tr>
        <tr>
          <td>NS vs. JSON (Before DEFLATE)</td>
          <td
            >Saving: {formatPercent2DP(1 - bytes.length / scriptString.length)} ({
              scriptString.length - bytes.length
            } bytes)</td
          >
        </tr>
        <tr>
          <td>NS vs. JSON (After DEFLATE)</td>
          <td
            >Saving: {
              formatPercent2DP(
                1 - compressedBytes.length / jsonCompressedBytes.length,
              )
            } ({jsonCompressedBytes.length - compressedBytes.length} bytes)</td
          >
        </tr>
        <tr>
          <td>Base64 URL encoding</td>
          <td
            >Saving: {formatPercent2DP(1 - b64.length / compressedBytes.length)}
            ({compressedBytes.length} bytes to {b64.length} characters in URL)</td
          >
        </tr>
      </tbody>
    </table>
  </div>
</MinimalLayout>

<style>
  .inspect-page {
    max-width: 80rem;
    padding: 10px;
    margin: 0 auto;

    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  table {
    border-collapse: collapse;
  }

  th,
  td {
    border: 1px solid currentColor;
    padding: 0.5rem;
  }

  .allow-word-break {
    word-break: break-all;
  }

  .node-container {
    display: inline-block;
  }
</style>
